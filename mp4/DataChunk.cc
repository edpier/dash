#include "DataChunk.h"

#include <iostream>

/*********************************************************************//**
*
*************************************************************************/
DataChunk::DataChunk() {
    
    size = 0;
    data = NULL;
    
} // end of constructor
  
/*********************************************************************//**
*
*************************************************************************/
DataChunk::~DataChunk() {
    
    delete [] data;
    
} // end of destructor
  
/*********************************************************************//**
*
*************************************************************************/
void DataChunk::setSize(uint32_t size) {
    
    std::cout << "        NALU size="<<size<<std::endl;
    
    this->size = size;
    data = new uint8_t[size];
    
} // end of setSize method
  
/*********************************************************************//**
*
*************************************************************************/
uint8_t* DataChunk::getData() { return data; }
      
/*********************************************************************//**
*
*************************************************************************/
const uint8_t* DataChunk::getData() const { return data; }
  
/*********************************************************************//**
*
*************************************************************************/
uint64_t DataChunk::getSize() const { return size; }
  
/*********************************************************************//**
*
*************************************************************************/
uint64_t DataChunk::getTotalSize() const { return size+4; }
  
/*********************************************************************//**
*
*************************************************************************/
void DataChunk::read(ByteSource& source) {
    
    setSize(source.readUint32());
    source.read(data, size);

} // end of read method
  
/*********************************************************************//**
*
*************************************************************************/
void DataChunk::write(ByteSink& sink) const {
    
    sink.writeUint32(size);
    sink.write(data, size);
    
} // end of write method
